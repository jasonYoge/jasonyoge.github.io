---
import type { GetStaticPaths } from 'astro'
import Layout from '@layouts/Layout.astro'
import { dateString, getSortedPosts } from '@utils'
import PostPreview from '@components/PostPreview.astro'
import DividerText from '@components/DividerText.astro'
import { getCollection, render } from 'astro:content'
import PostAddendum from '@components/PostAddendum.astro'
import TableOfContents from '@components/TableOfContents.astro'
import { Image } from 'astro:assets'

export const getStaticPaths = (async () => {
  const posts = await getSortedPosts()
  return posts.map((post, index) => {
    const validPrev = index > 0
    const validNext = index < posts.length - 1
    const prev = validPrev ? posts[index - 1] : undefined
    const next = validNext ? posts[index + 1] : undefined
    return {
      params: { slug: post.id },
      props: { post, prev, next },
    }
  })
}) satisfies GetStaticPaths

const { post, prev, next } = Astro.props
const postData = post.data.properties
const { headings, Content: PostContent } = await render(post)
const addendum = await getCollection('addendum')
let AddendumContent
let addendumAvatarImage
if (addendum.length > 0) {
  const addendumEntry = addendum[0]
  const { Content } = await render(addendumEntry)
  AddendumContent = Content
  addendumAvatarImage = addendumEntry.data.avatarImage
}
---

<Layout
  title={postData.title}
  description={postData.description}
  author={postData.author?.people[0].name as string}
  tags={postData.tags}
>
  <article class="max-w-full py-7.5" data-pagefind-body>
    {
      postData.coverImage?.files[0].type === 'file' && (
        <Image
          src={postData.coverImage?.files[0].file.url}
          alt={postData.coverImage?.files[0].name}
          class="w-full rounded-xl mb-5"
          height={400}
          width={800}
        />
      )
    }
    <h1 class="mb-3 text-2xl text-[var(--theme-h1)] font-semibold">
      # {postData.title}
    </h1>
    <div class="text-foreground/80 mb-2.5">
      {postData.date?.created_time ? <time>{dateString(new Date(postData.date?.created_time))}</time> : '-'}
      {
        postData.author?.people[0].name && (
          <span class="before:content-['::'] before:inline-block before:mx-0.5">
            {postData.author?.people[0].name}
          </span>
        )
      }
    </div>
    {
      postData.tags && (
        <div class="text-accent mb-5">
          {postData.tags.map((tag) => (
            <a class="underline mr-4 inline-block" href={`/tags/${encodeURIComponent(tag)}`}>
              #{tag}
            </a>
          ))}
        </div>
      )
    }
    {headings.length > 0 && <TableOfContents headings={headings} />}
    <div class="my-5 prose">
      <PostContent />
    </div>
  </article>
  {
    AddendumContent && (
      <PostAddendum avatarImage={addendumAvatarImage}>
        <AddendumContent />
      </PostAddendum>
    )
  }
  <DividerText text="More Posts" />
  {prev && <PostPreview post={prev} />}
  {next && <PostPreview post={next} />}
</Layout>
